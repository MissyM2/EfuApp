@inject IViewWeekAssessmentsByTermUseCase ViewWeekAssessmentsByTermUseCase
@inject IViewTermByIdUseCase ViewTermByIdUseCase
@inject IAddWeekAssessmentsUseCase AddWeekAssessmentsUseCase

 @if (listWeekAssessments == null || listWeekAssessments.Any() == false)
    {
        <div class="alert alert-dismissible alert-secondary">
            There are no week Assessments for this student for this term.  To create week assessments, click
        <a class="btn btn-primary page-subtitle" @onclick="@(() => CreateWeekAssessmentsForThisStudentForThisTerm())"> Here </a>
        here.
        </div>
    }
    else
    {
        <div class="row">
            <div>
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">
                                <div class="d-flex justify-content-center page-subtitle">
                                    <label class="weekassessments-attributes" for="weekAssessmentweeknumber">Week Number</label>
                                </div>
                            </th>
                            <th scope="col">
                                <div class="d-flex justify-content-center page-subtitle">
                                    <label class="weekassessments-attributes" for="weekAssessmentname">Liked Least</label>
                                </div>
                            </th>
                            <th scope="col">
                                <div class="d-flex justify-content-center text-wrap page-subtitle">
                                    <label class="weekassessments-attributes" for="desc">Liked Most</label>
                                </div>
                            </th>
                            <th scope="col">
                                <div class="d-flex justify-content-center page-subtitle">
                                    <label class="weekassessments-attributes" for="assignmentdate">Most Difficult</label>
                                </div>
                            </th>
                            <th scope="col">
                                <div class="d-flex justify-content-center page-subtitle">
                                    <label class="weekassessments-attributes" for="duedate">Least Difficult</label>
                                </div>
                            </th>
                            <th scope="col">
                                <div class="d-flex justify-content-center page-subtitle">
                                    <label class="weekassessments-attributes" for="studentuser">Student User</label>
                                </div>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <WeekAssessmentListItemComponent ListWeekAssessments = "@listWeekAssessments"></WeekAssessmentListItemComponent>
                    </tbody>
                </table>
        </div>
    </div>
}


@code {

    private AuthenticationState? authenticationState;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private Term term = new Term();



    private List<WeekAssessment> listWeekAssessments = new List<WeekAssessment>();

    [Parameter]
    public int SelectedTermId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        authenticationState = await authenticationStateTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        listWeekAssessments = (await ViewWeekAssessmentsByTermUseCase.ExecuteAsync(this.SelectedTermId)).ToList();
    }

    private async Task CreateWeekAssessmentsForThisStudentForThisTerm()
    {
        var user = authenticationState?.User?.Claims?.FirstOrDefault()?.Value;

        term = await ViewTermByIdUseCase.ExecuteAsync(SelectedTermId);

       // term = await ViewTermByNameUseCase.ExecuteAsync(SelectedTermId);

        if (user != null && term != null)
            await AddWeekAssessmentsUseCase.ExecuteAsync(term, term.TermWeekCount, user);

        listWeekAssessments = (await ViewWeekAssessmentsByTermUseCase.ExecuteAsync(this.SelectedTermId)).ToList();

        //listWeekAssessments = (await ViewWeekAssessmentsByTermUseCase.ExecuteAsync(this.SelectedTermId)).ToList();
    }

}
