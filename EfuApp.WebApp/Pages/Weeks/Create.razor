@page "/weeks/create"
@inject NavigationManager NavManager
@inject IAddWeekUseCase AddWeekUseCase
@inject IViewTermsByNameUseCase ViewTermsByNameUseCase

<h3>Add Week</h3>
<br />
<EditForm Model="week" OnValidSubmit="SaveWeek">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="name">Week Name</label>
        <InputText id="name"
                   @bind-Value="week.WeekName"
                   class="form-control">
        </InputText>
    </div>

    <div class="form-group">
        <label for="name">Week Description</label>
        <InputText id="name"
                   @bind-Value="week.WeekDesc"
                   class="form-control">
        </InputText>
    </div>

    <div class="form-group">
        <label for="term">Term</label>
        <InputSelect @bind-Value="week.TermId" class="form-select" id="term">
            <option value="">-- Select Term --</option>
            @foreach (var trm in listTerms)
            {
                <option value="@trm.TermId">@trm.TermName</option>
            }
        </InputSelect>
    </div>


    <br />
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    private Week week = new Week();
    private List<Term> listTerms = new List<Term>();

    protected override async Task OnInitializedAsync()
    {
        listTerms = (await ViewTermsByNameUseCase.ExecuteAsync("")).ToList();
    }

    private async Task SaveWeek()
    {
        await AddWeekUseCase.ExecuteAsync(week);
        NavManager.NavigateTo("/weeks/list");
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/weeks/list");
    }
}
