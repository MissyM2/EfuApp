@page "/terms/create"

@inject NavigationManager NavManager
@inject IAddTermUseCase AddTermUseCase

<h3>Add Term</h3>
<br />
<EditForm Model="term" OnValidSubmit="SaveTerm">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="name">Term Name</label>
        <InputText id="name"
                   @bind-Value="term.TermName"
                   class="form-control">
        </InputText>
    </div>

    <div class="form-group">
        <label for="desc">Term Description</label>
        <InputText id="desc"
                   @bind-Value="term.TermDesc"
                   class="form-control">
        </InputText>
    </div>

    <div class="form-group">
        <label for="weeknum">Number of Weeks</label>
        <InputNumber id="name"
        @bind-Value="term.TermWeekCount"
                   class="form-control">
        </InputNumber>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {


    private AuthenticationState? authenticationState;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }



    private Term term = new Term();

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask != null)
            authenticationState = await authenticationStateTask;
        var user = authenticationState?.User;
        var name = user?.Identity?.Name;
    }


    private async Task SaveTerm()
    {
        var user = authenticationState?.User?.Claims?.FirstOrDefault()?.Value;

        if (user != null)
            await AddTermUseCase.ExecuteAsync(term, user );
        NavManager.NavigateTo("/terms/list");
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/terms/list");
    }
}
